/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CarbonInterface extends ethers.utils.Interface {
  functions: {
    "GetOrders()": FunctionFragment;
    "addIssurers(address[])": FunctionFragment;
    "buyCarbon(uint256)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "carbonLedger(uint256)": FunctionFragment;
    "carbonSeason()": FunctionFragment;
    "claimCarbon(uint256)": FunctionFragment;
    "companies(uint256)": FunctionFragment;
    "companyCertificate(address,uint256)": FunctionFragment;
    "companyQuota(address)": FunctionFragment;
    "companyScore(address)": FunctionFragment;
    "companySeasonCarbon(address)": FunctionFragment;
    "governer()": FunctionFragment;
    "isIssuer(address)": FunctionFragment;
    "issuers(uint256)": FunctionFragment;
    "makeOrder(uint256)": FunctionFragment;
    "newCarbonSeason(uint256)": FunctionFragment;
    "swapOrders(uint256)": FunctionFragment;
    "uploadCertificate(address,int256,string)": FunctionFragment;
    "useCarbon(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "GetOrders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addIssurers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCarbon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonLedger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonSeason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCarbon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companyCertificate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companyQuota",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "companyScore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "companySeasonCarbon",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "governer", values?: undefined): string;
  encodeFunctionData(functionFragment: "isIssuer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newCarbonSeason",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadCertificate",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "useCarbon",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "GetOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addIssurers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyCarbon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonSeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCarbon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "companies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "companyCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyQuota",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companySeasonCarbon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newCarbonSeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uploadCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useCarbon", data: BytesLike): Result;

  events: {
    "CarbonClaim(uint256)": EventFragment;
    "CarbonUse(uint256)": EventFragment;
    "NewCarbonSeason(uint256)": EventFragment;
    "OrderBuy(uint256,address,address,uint256)": EventFragment;
    "OrderCancel(uint256,address)": EventFragment;
    "OrderMake(uint256)": EventFragment;
    "UploadCertificate(address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CarbonClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CarbonUse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCarbonSeason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderMake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UploadCertificate"): EventFragment;
}

export class Carbon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CarbonInterface;

  functions: {
    GetOrders(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, boolean] & {
          from: string;
          amount: BigNumber;
          to: string;
          onSale: boolean;
        })[]
      ]
    >;

    addIssurers(
      _issuers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyCarbon(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    carbonLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startBlock: BigNumber;
        totalSupply: BigNumber;
        totalUsed: BigNumber;
      }
    >;

    carbonSeason(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startBlock: BigNumber;
        totalSupply: BigNumber;
        totalUsed: BigNumber;
      }
    >;

    claimCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    companies(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    companyCertificate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        issuer: string;
        ipfs: string;
        quota: BigNumber;
      }
    >;

    companyQuota(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    companyScore(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    companySeasonCarbon(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        claimed: BigNumber;
        used: BigNumber;
        buyed: BigNumber;
        locked: BigNumber;
      }
    >;

    governer(overrides?: CallOverrides): Promise<[string]>;

    isIssuer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    issuers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    makeOrder(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newCarbonSeason(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        from: string;
        amount: BigNumber;
        to: string;
        onSale: boolean;
      }
    >;

    uploadCertificate(
      company: string,
      quota: BigNumberish,
      ipfs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  GetOrders(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, boolean] & {
      from: string;
      amount: BigNumber;
      to: string;
      onSale: boolean;
    })[]
  >;

  addIssurers(
    _issuers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyCarbon(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  carbonLedger(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startBlock: BigNumber;
      totalSupply: BigNumber;
      totalUsed: BigNumber;
    }
  >;

  carbonSeason(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startBlock: BigNumber;
      totalSupply: BigNumber;
      totalUsed: BigNumber;
    }
  >;

  claimCarbon(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  companies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  companyCertificate(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      issuer: string;
      ipfs: string;
      quota: BigNumber;
    }
  >;

  companyQuota(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  companyScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  companySeasonCarbon(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      claimed: BigNumber;
      used: BigNumber;
      buyed: BigNumber;
      locked: BigNumber;
    }
  >;

  governer(overrides?: CallOverrides): Promise<string>;

  isIssuer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  issuers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  makeOrder(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newCarbonSeason(
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      from: string;
      amount: BigNumber;
      to: string;
      onSale: boolean;
    }
  >;

  uploadCertificate(
    company: string,
    quota: BigNumberish,
    ipfs: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useCarbon(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GetOrders(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, boolean] & {
        from: string;
        amount: BigNumber;
        to: string;
        onSale: boolean;
      })[]
    >;

    addIssurers(_issuers: string[], overrides?: CallOverrides): Promise<void>;

    buyCarbon(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelOrder(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    carbonLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startBlock: BigNumber;
        totalSupply: BigNumber;
        totalUsed: BigNumber;
      }
    >;

    carbonSeason(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startBlock: BigNumber;
        totalSupply: BigNumber;
        totalUsed: BigNumber;
      }
    >;

    claimCarbon(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    companies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    companyCertificate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        issuer: string;
        ipfs: string;
        quota: BigNumber;
      }
    >;

    companyQuota(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    companyScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    companySeasonCarbon(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        claimed: BigNumber;
        used: BigNumber;
        buyed: BigNumber;
        locked: BigNumber;
      }
    >;

    governer(overrides?: CallOverrides): Promise<string>;

    isIssuer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    issuers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    makeOrder(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    newCarbonSeason(
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        from: string;
        amount: BigNumber;
        to: string;
        onSale: boolean;
      }
    >;

    uploadCertificate(
      company: string,
      quota: BigNumberish,
      ipfs: string,
      overrides?: CallOverrides
    ): Promise<void>;

    useCarbon(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CarbonClaim(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    CarbonUse(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    NewCarbonSeason(
      supply?: null
    ): TypedEventFilter<[BigNumber], { supply: BigNumber }>;

    OrderBuy(
      index?: null,
      buyer?: null,
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { index: BigNumber; buyer: string; from: string; amount: BigNumber }
    >;

    OrderCancel(
      index?: null,
      from?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; from: string }
    >;

    OrderMake(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    UploadCertificate(
      company?: null,
      quota?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { company: string; quota: BigNumber }
    >;
  };

  estimateGas: {
    GetOrders(overrides?: CallOverrides): Promise<BigNumber>;

    addIssurers(
      _issuers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyCarbon(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    carbonLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    carbonSeason(overrides?: CallOverrides): Promise<BigNumber>;

    claimCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    companies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    companyCertificate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    companyQuota(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    companyScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    companySeasonCarbon(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governer(overrides?: CallOverrides): Promise<BigNumber>;

    isIssuer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    issuers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    makeOrder(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newCarbonSeason(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uploadCertificate(
      company: string,
      quota: BigNumberish,
      ipfs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addIssurers(
      _issuers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyCarbon(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    carbonLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    carbonSeason(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    companies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyCertificate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyQuota(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companySeasonCarbon(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIssuer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOrder(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newCarbonSeason(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uploadCertificate(
      company: string,
      quota: BigNumberish,
      ipfs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useCarbon(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
